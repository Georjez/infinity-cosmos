import Mathlib.AlgebraicTopology.Quasicategory
import Mathlib.AlgebraicTopology.SimplicialCategory.Basic
import Mathlib.CategoryTheory.Closed.Cartesian
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.CommSq

noncomputable section

namespace CategoryTheory
open Category Limits Functor
universe v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ

variable (K : Type u) [Category.{v} K]

instance : MonoidalClosed SSet := sorry

namespace SimplicialCategory
variable [SimplicialCategory K]
variable {K}

instance : CartesianClosed SSet := sorry
-- instance : HasBinaryProducts SSet := by infer_instance

-- ER: Should work but can't figure out the monoidal product is the cartesian product.
-- ER: Also I can't get the √ó notation to work for the product.
def sComp (X Y Z : K) : Limits.prod (sHom X Y) (sHom Y Z) ‚ü∂ sHom X Z := by sorry
--  have := sHomComp X Y Z

def coneNatTrans {A : SSet} {AX X : K} (Y : K) (cone : A ‚ü∂ sHom AX X) : sHom Y AX ‚ü∂ (A ‚üπ sHom Y X) :=
  let map := (prod.map (ùüô (sHom Y AX)) cone) ‚â´ (sComp Y AX X)
  (CartesianClosed.curry ((prod.braiding A (sHom Y AX)).hom ‚â´ map))

structure IsCotensor {A : SSet} {X : K} (AX : K) (cone : A ‚ü∂ sHom AX X) where
  uniq : ‚àÄ (Y : K), (IsIso (coneNatTrans Y cone))

structure CotensorCone (A : SSet) (X : K) where
  /-- The object -/
  obj : K
  /-- The cone itself -/
  cone : A ‚ü∂ sHom obj X
  /-- The universal property of the limit cone -/
  is_cotensor : IsCotensor obj cone

/-- `HasCotensor F` represents the mere existence of a simplicial cotensor. -/
class HasCotensor (A : SSet) (X : K) : Prop where mk' ::
  /-- There is some limit cone for `F` -/
  exists_cotensor : Nonempty (CotensorCone A X)

theorem HasCotensor.mk {A : SSet} {X : K} (c : CotensorCone A X) : HasCotensor A X :=
  ‚ü®Nonempty.intro c‚ü©

/-- Use the axiom of choice to extract explicit `CotensorCone A X` from `HasCotensor A X`. -/
def getCotensorCone (A : SSet) (X : K) [HasCotensor A X] : CotensorCone A X :=
  Classical.choice <| HasCotensor.exists_cotensor

variable (K) in
/-- `K` has simplicial cotensors  -/
class HasCotensors : Prop where
  /-- All `A : SSet` and `X : K` have a cotensor. -/
  has_cotensors : ‚àÄ A : SSet, ‚àÄ X : K, HasCotensor A X := by infer_instance -- ER: I don't get what this means.

-- ER: copied; not sure what this is.
instance (priority := 100) hasCotensorsOfHasCotensors {K : Type u} [Category.{v} K] [SimplicialCategory K] [HasCotensors K] (A : SSet) (X : K) : HasCotensor A X := HasCotensors.has_cotensors A X

-- Interface to the `HasCotensor` class.
/-- An arbitrary choice of cotensor obj. -/
def cotensor.obj (A : SSet) (X : K) [HasCotensor A X] : K :=
  (getCotensorCone A X).obj

infixr:60 " ‚ãî " => cotensor.obj

/-- The associated cotensor cone. -/
def cotensor.cone (A : SSet) (X : K) [HasCotensor A X] : A ‚ü∂ sHom (A ‚ãî X) X :=
  (getCotensorCone A X).cone

/-- The universal property of this cone.  -/
def cotensor.is_cotensor (A : SSet) (X : K) [HasCotensor A X] :
    IsCotensor (A ‚ãî X) (cotensor.cone A X) := (getCotensorCone A X).is_cotensor

def cotensor.iso (A : SSet) (X : K) [HasCotensor A X] (Y : K) :
    (sHom Y (A ‚ãî X)) ‚âÖ (A ‚üπ sHom Y X) := by
  have := (cotensor.is_cotensor A X).uniq Y
  exact asIso (coneNatTrans Y (cone A X))

-- ER: Finish by applying ev0 to cotensor.iso and using a similar equivalence that calculates the 0-simplicies in the cartesian closed structure.
def cotensor.iso.underlying (A : SSet) (X : K) [HasCotensor A X] (Y : K) :
  (Y ‚ü∂ (A ‚ãî X)) ‚âÉ (A ‚ü∂ sHom Y X) := by
  have := SimplicialCategory.homEquiv' Y (A ‚ãî X)
  sorry

def cotensorCovMap [HasCotensors K] (A : SSet) {X Y : K} (f : X ‚ü∂ Y) : A ‚ãî X ‚ü∂ A ‚ãî Y :=
  (cotensor.iso.underlying A Y (A ‚ãî X)).symm
    ((cotensor.cone A X) ‚â´ (sHomWhiskerLeft (A ‚ãî X) f))

def cotensorContraMap [HasCotensors K] {A B : SSet} (i : A ‚ü∂ B) (X : K) : B ‚ãî X ‚ü∂ A ‚ãî X :=
  (cotensor.iso.underlying A X (B ‚ãî X)).symm (i ‚â´ (cotensor.cone B X))

theorem cotensor_bifunctoriality [HasCotensors K] {A B : SSet} (i : A ‚ü∂ B) {X Y : K} (f : X ‚ü∂ Y) :
    (cotensorCovMap B f) ‚â´ (cotensorContraMap i Y) =
    (cotensorContraMap i X) ‚â´ (cotensorCovMap A f) := by sorry

-- noncomputable def cotensor [SimplicialCategory K] : SSet·µí·µñ ‚•§ K ‚•§ K := sorry

-- abbrev cotensorObj (A : SSet) (X : K) : K := (cotensor.obj (.op A)).obj X

-- infixr:60 " ‚ãî‚ãî " => cotensorObj

-- def foo (X : K) : IsTerminal ((‚ä•_ SSet) ‚ãî‚ãî X) := sorry


end SimplicialCategory

open SimplicialCategory

class InfinityCosmos extends SimplicialCategory K where
  IsIsoFibration {X Y : K} : (X ‚ü∂ Y) ‚Üí Prop
  [has_qcat_homs : ‚àÄ {X Y : K}, SSet.Quasicategory (EnrichedCategory.Hom X Y)]
  comp_isIsoFibration {X Y Z : K} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} :
    IsIsoFibration f ‚Üí IsIsoFibration g ‚Üí IsIsoFibration (f ‚â´ g)
  iso_isIsoFibration {X Y : K} (e : X ‚âÖ Y) : IsIsoFibration e.hom
  has_terminal : HasTerminal K
  all_objects_fibrant {X Y : K} (hY : IsTerminal Y) (f : X ‚ü∂ Y) : IsIsoFibration f
  has_products : HasBinaryProducts K
  prod_map_fibrant {X Y X' Y' : K} {f : X ‚ü∂ Y} {g : X' ‚ü∂ Y'} :
    IsIsoFibration f ‚Üí IsIsoFibration g ‚Üí IsIsoFibration (prod.map f g)
  [has_isoFibration_pullbacks {X Y Z : K} (f : X ‚ü∂ Y) (g : Z ‚ü∂ Y) :
    IsIsoFibration g ‚Üí HasPullback f g]
  pullback_is_isoFibration {X Y Z P : K} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z)
    (fst : P ‚ü∂ X) (snd : P ‚ü∂ Y) (h : IsPullback fst snd f g) :
    IsIsoFibration g ‚Üí IsIsoFibration fst
  has_limits_of_towers (F : ‚Ñï·µí·µñ ‚•§ K) :
    (‚àÄ n : ‚Ñï, IsIsoFibration (F.map (homOfLE (Nat.le_succ n)).op)) ‚Üí HasLimit F
  has_limits_of_towers_isIsoFibration (F : ‚Ñï·µí·µñ ‚•§ K) (hf) :
    haveI := has_limits_of_towers F hf
    IsIsoFibration (limit.œÄ F (.op 0))
  [has_cotensors : HasCotensors K] -- ER: Added
  -- leibniz_cotensor {X Y : K} (f : X ‚ü∂ Y) (A B : SSet) (i : A ‚ü∂ B) [Mono i]
  --   (hf : IsIsoFibration f) {P : K} (fst : P ‚ü∂ B ‚ãî‚ãî Y) (snd : P ‚ü∂ A ‚ãî‚ãî X)
  --   (h : IsPullback fst snd ((cotensor.map (.op i)).app Y) ((cotensor.obj (.op A)).map f)) :
  --   IsIsoFibration (h.isLimit.lift <|
  --     PullbackCone.mk ((cotensor.obj (.op B)).map f) ((cotensor.map (.op i)).app X) (by aesop_cat))
  leibniz_cotensor {X Y : K} (f : X ‚ü∂ Y) (A B : SSet) (i : A ‚ü∂ B) [Mono i]
    (hf : IsIsoFibration f) {P : K} (fst : P ‚ü∂ B ‚ãî Y) (snd : P ‚ü∂ A ‚ãî X)
    (h : IsPullback fst snd (cotensorContraMap i Y) (cotensorCovMap A f)) :
    IsIsoFibration (h.isLimit.lift <|
      PullbackCone.mk (cotensorCovMap B f) (cotensorContraMap i X) (cotensor_bifunctoriality i f))
  local_isoFibration {X Y Z : K} (f : Y ‚ü∂ Z) (hf : IsIsoFibration f) :
    -- FIXME (V := SSet)
    ‚àÄ (_ : MonoidalClosed.curry (EnrichedCategory.comp (V := SSet) X Y Z) = sorry), sorry
namespace InfinityCosmos
variable [InfinityCosmos.{v} K]

def IsoFibration (X Y : K) : Type v := {f : X ‚ü∂ Y // IsIsoFibration f}

infixr:25  " ‚Ü† " => IsoFibration

end InfinityCosmos
